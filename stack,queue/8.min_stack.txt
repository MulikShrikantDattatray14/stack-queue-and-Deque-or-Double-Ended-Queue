
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

===============================================================================================================

//https://www.youtube.com/watch?v=8UegNFCUQks

function solve() {
  // Initalize your variables here
  this.minStack = []; // stores min till  that point
  this.stack = [];
}
solve.prototype.push = function (e) {
  let temp = e;
  // normal stack
  this.stack.push(e);

  // minimum stack.
  if (this.minStack.length !== 0) {
    temp = Math.min(e, this.minStack[this.minStack.length - 1]);
  }
  // first element in the minstack directly goes into the minstack.
  this.minStack.push(temp);
};
solve.prototype.pop = function () {
  //remove last one from both the stacks
  this.minStack.pop();
  this.stack.pop();
  return;
};
solve.prototype.top = function () {
  // return top
  return this.stack.length !== 0 ? this.stack[this.stack.length - 1] : -1;
};
solve.prototype.getMin = function () {
  // return minimum
  return this.minStack.length !== 0
    ? this.minStack[this.minStack.length - 1]
    : -1;
};
module.exports = {
  solve: solve,
};
