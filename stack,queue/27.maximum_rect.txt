//85. Maximal Rectangle-https://leetcode.com/problems/maximal-rectangle/description/
//https://www.youtube.com/watch?v=oaN9ibZKMpA&t=386s



//===============================================================================================================================================================================================================================


let matrix = [
  ["1", "0", "1", "0", "0"],
  ["1", "0", "1", "1", "1"],
  ["1", "1", "1", "1", "1"],
  ["1", "0", "0", "1", "0"],
];
//Output: 6
let finalans = largestarea(matrix);
console.log(finalans);

function largestarea(a) {
  // convert each element from  the first row into number .
  let n = a[0].length;
  for (let i = 0; i < n; i++) {
    a[0][i] = Number(a[0][i]);
  }

  let currow = a[0];
  console.log(currow);
  let maxans = maxarea(currow);

  for (let i = 1; i < a.length; i++) {
    for (let j = 0; j < a[0].length; j++) {
      if (a[i][j] == "1") {
        currow[j] += 1;
      } else {
        currow[j] = 0;
      }
    }

    let curans = maxarea(currow);
    maxans = Math.max(maxans, curans);
  }
  return maxans;
}

function maxarea(a) {
  let maxans = 0;
  let ps = prevsmall(a);
  let ns = nextsmall(a);
  for (let i = 0; i < a.length; i++) {
    let curr = (ns[i] - ps[i] - 1) * a[i];
    maxans = Math.max(maxans, curr);
  }
  return maxans;
}

// get the index and not the values
function prevsmall(a) {
  const result = [];
  const stack = [];
  for (let i = 0; i < a.length; i++) {
    while (stack.length > 0 && a[stack[stack.length - 1]] >= a[i]) {
      stack.pop();
    }
    if (stack.length === 0) {
      result.push(-1);
    } else {
      result.push(stack[stack.length - 1]);
    }
    stack.push(i);
  }
  return result;
}

function nextsmall(a) {
  let n = a.length;
  const result = [];
  const stack = [];
  for (let i = a.length - 1; i >= 0; i--) {
    while (stack.length > 0 && a[stack[stack.length - 1]] >= a[i]) {
      stack.pop();
    }
    if (stack.length === 0) {
      result.unshift(n);
    } else {
      result.unshift(stack[stack.length - 1]);
    }
    stack.push(i);
  }
  return result;
}
