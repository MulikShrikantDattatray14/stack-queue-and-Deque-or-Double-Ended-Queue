/////////////////////////////////////////////////////////////////////////////////////////
brute force : 

//logic :  find the number of elements smaller or equal to the current element.

let prices = [100, 80, 60, 70, 60, 75, 85]; //[1, 1, 1, 2,1, 4, 6]
let final = [];
for (let i = 0; i < prices.length; i++) {
  let days = 0;
  for (let j = i; j >= 0; j--) {
    // before ith
    if (prices[i] >= prices[j]) days++;
    else break;
  }
  final[i] = days;
}
console.log(final);

/////////////////////////////////////////////////////////////////////////////////////////

optimal solution : 

//https://www.youtube.com/watch?v=XlD5VsOZsyA


This code implements the Stock Span problem using a stack-based approach. The goal of the Stock Span problem is to find, for each day, how many consecutive previous days have stock prices less than or equal to the current day's price.

Here's a brief explanation of the code:

1.result array is used to store the final result (the span for each day).
2.stack is used to keep track of pairs [price, days], where price is the stock price, and days is the span (number of consecutive days including the current day with a stock price less than or equal to price).
3.The code iterates through each element in the prices array using a for...of loop.
4.For each day, it calculates the span (days) by popping elements from the stack until it finds a stock price greater than the current day's price. It accumulates the span values while popping.
5.It then pushes the current day's [price, days] pair onto the stack and adds the days to the result array.
The final result is an array containing the spans for each day.
6.In the example usage with prices = [85, 76, 43, 26, 52], the output stockSpanResult would be [1, 1, 1, 1, 3], indicating the spans for each corresponding day in the input array.

function stockSpan(prices) {
  const result = [];
  const stack = [];
  for (const price of prices) {
    let days = 1;
    // if the price is greater than equal to the top element of the stack, keep popping else directly push into stack
    while (stack.length > 0 && stack[stack.length - 1][0] <= price) {
      // start removing the smaller elements and add the days.
      let ele = stack.pop();
      days += ele[1];
      //days += stack.pop()[1];
    }
    // if the stack is empty or the top element in the stack is greater than the price, directly push the element into the stack.
    stack.push([price, days]);
    result.push(days);
  }
  return result;
}
// Example usage:
//[[],[85],[76],[43],[26],[52]]
const prices = [85, 76, 43, 26, 52];
const stockSpanResult = stockSpan(prices);
console.log(stockSpanResult);
////////////////////////////////////////////////////////////////////////////////////////