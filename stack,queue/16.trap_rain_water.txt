// most optimised approach - using 2 pointer
//https://www.youtube.com/watch?v=Lrp9v-NQPXw
function trap(arr) {
  let n = arr.length;
  let left = 0;
  let right = n - 1;
  let leftbar = arr[0];
  let rightbar = arr[n - 1];
  let ans = 0;
  while (left <= right) {
    // which bar is limiting bar
    if (leftbar < rightbar) {
      // left is limiting bar
      if (arr[left] > leftbar) {
        leftbar = arr[left];
      } else {
        ans += leftbar - arr[left];
        left++;
      }
    } else {
      // right is limiting bar
      if (arr[right] > rightbar) {
        rightbar = arr[right];
      } else {
        ans += rightbar - arr[right];
        right--;
      }
    }
  }
  return ans;
}
let A = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1];
let ans = trap(A);
console.log(ans);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // using prefix sum :

function trap(A) {
  //https://www.youtube.com/watch?v=UZG3-vZlFM4
  let n = A.length;
  // // this pf can also be generated using the nearest smaller element/nearest greater element.
  let pf = [];
  let sf = [];
  pf[0] = A[0];
  for (let i = 1; i < n; i++) {
    //// A[i-1] is the previous element.
    pf[i] = Math.max(pf[i - 1], A[i - 1]);
  }
  sf[A.length - 1] = A[A.length - 1];
  for (let i = n - 2; i >= 0; i--) {
    // A[i+1] is the next element.
    sf[i] = Math.max(sf[i + 1], A[i + 1]);
  }

  let sum = 0;
  let temp = 0;
  for (let i = 0; i < n; i++) {
    temp = Math.min(pf[i], sf[i]) - A[i];
    if (temp > 0) sum += temp;
  }
  return sum;
}
let A = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1];
let ans = trap(A);
console.log(ans);
